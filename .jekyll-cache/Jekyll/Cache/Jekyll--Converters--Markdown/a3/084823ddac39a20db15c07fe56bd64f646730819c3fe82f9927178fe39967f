I"U	<ul>
  <li>DFS/BFS 알고리즘 문제 : 프로그래머스 LEVEL 2(타겟 넘버)
<img src="https://user-images.githubusercontent.com/34560965/104675539-0f7c1d80-5729-11eb-8007-efa227422ce4.png" alt="image" />
    <ul>
      <li>사용 언어 : C++</li>
      <li>해결 날짜 : 2021-01-15</li>
    </ul>

    <p><strong>- 해결 방법</strong> :</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre> 우선 numbers vector의 각 인덱스에 대해 DFS를 수행하여 sum에서 그 인덱스의 값을 뺀 값과 더한 값을 각각 재귀 호출하였다. 
    
 모든 인덱스에 대한 접근을 완료한 후 그 값이 target과 일치할 때 answer를 증가시킨다.(index가 vertor의 범위를 벗어나면 점화식을 종료한다.)

 모든 DFS의 과정이 종료되면 target과 같을 때 마다 증가된 answer의 값을 반환하여 문제를 해결하였다.
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <ul>
      <li>코드</li>
    </ul>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre> #include &lt;string&gt;
 #include &lt;vector&gt;

 using namespace std;
 int answer = 0;

 //모든 인덱스에 대해 뺀 값과 더한 값을 재귀
 void dfs(vector&lt;int&gt; numbers, int target, int sum, int index){
     if(index &gt;= numbers.size()){ //index가 numbers vector의 범위를 벗어나면 점화식 종료
         if(sum == target){
             answer++;
         }
         return;
     }    
     dfs(numbers, target, sum - numbers[index], index+1);
     dfs(numbers, target, sum + numbers[index], index+1);
 }

 int solution(vector&lt;int&gt; numbers, int target) {
     //numbers = 사용할 수 있는 숫자가 담긴 배열(2~20개/1~50의 숫자)
     //target = 타겟 넘버(1~1000)
     //answer = 타겟 넘버를 만드는 방법의 수
     dfs(numbers, target, 0, 0);
     return answer;
 }
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>
:ET