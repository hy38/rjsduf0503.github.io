I"B<ul>
  <li>7주차 과제 - 섬 간 이동(dfs / bfs)</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/34560965/116008698-cce3ae80-a650-11eb-826a-02b45a1226a6.png" alt="image" />
<img src="https://user-images.githubusercontent.com/34560965/116008699-cead7200-a650-11eb-8616-2429fd358237.png" alt="image" /></p>

<ul>
  <li>
    <p>사용 언어 : python</p>
  </li>
  <li>
    <p>해결 날짜 : 2021-04-26</p>
  </li>
  <li>
    <p>느낀점 및 해결 과정 :</p>

    <ul>
      <li>dfs 함수를 통해 각각의 섬에 번호를 붙여서 초기화를 해준다. (1번 섬은 전부 -1로, 2번 섬은 전부 -2로 등)</li>
      <li>
        <p>bfs 함수를 통해 각 섬에서 다른 섬으로의 최단 거리를 찾는다.
  이 때 방향 벡터를 사용하여 상, 하, 좌, 우 로의 다음 위치 값을 비교하여 다음 위치가 주어진 범위를 벗어나는 경우 continue, 다음 위치도 현재 섬일 때 섬에서 방문하지 않았던 부분이라면 방문 처리 후 queue에 추가, 다음 위치가 바다인 경우는 거리를 표시해 주고 queue에 추가, 다른 섬을 만난 경우 거리를 계산하여 작은 값으로 교체 후 bfs를 종료하는 방법으로 문제를 해결하였다.</p>
      </li>
      <li>
        <p>시간 복잡도 :</p>

        <ul>
          <li>dfs : O(N2)</li>
          <li>bfs : 섬의 개수만큼 bfs를 호출, 함수 내부에서는 인접 행렬이므로 O(N2)</li>
          <li>따라서 O(N2 + K*N2) = O(N2) 의 시간 복잡도를 갖는다.</li>
        </ul>
      </li>
      <li>코드</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
</pre></td><td class="rouge-code"><pre>  <span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>
  <span class="kn">import</span> <span class="nn">copy</span>


  <span class="c1"># 각 섬의 값을 순서대로 -1, -2 , -3... 넘버링
</span>  <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
      <span class="k">global</span> <span class="n">island_number</span>
      <span class="c1"># 주어진 범위를 벗어나는 경우 종료
</span>      <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="n">N</span> <span class="ow">or</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="n">N</span><span class="p">:</span>
          <span class="k">return</span> <span class="bp">False</span>

      <span class="c1"># 방문하지 않은 노드 중 섬인 노드
</span>      <span class="k">if</span> <span class="n">island</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">visited</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
          <span class="c1"># 섬의 첫 방문인 경우 좌표 값을 queue에 추가해줌
</span>          <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">island_info</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">island_number</span><span class="p">:</span>
              <span class="n">island_info</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
          <span class="n">visited</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
          <span class="n">island</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="n">island_number</span>
          <span class="n">dfs</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
          <span class="n">dfs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
          <span class="n">dfs</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
          <span class="n">dfs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
          <span class="k">return</span> <span class="bp">True</span>
      <span class="k">return</span> <span class="bp">False</span>


  <span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
      <span class="k">global</span> <span class="n">answer</span>
      <span class="n">visited_island</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">N</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">)]</span>
      <span class="c1"># 깊은 복사를 통해 섬마다 bfs 할 때 마다 섬의 거리가 초기화
</span>      <span class="n">island_copy</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">island</span><span class="p">)</span>
      <span class="n">queue</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span>
      <span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">))</span>

      <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
          <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>
          <span class="n">visited_island</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
          <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
              <span class="n">nx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
              <span class="n">ny</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
              <span class="c1"># 다음 위치가 주어진 범위를 벗어나는 경우
</span>              <span class="k">if</span> <span class="n">nx</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">nx</span> <span class="o">&gt;=</span> <span class="n">N</span> <span class="ow">or</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">ny</span> <span class="o">&gt;=</span> <span class="n">N</span><span class="p">:</span>
                  <span class="k">continue</span>
              <span class="c1"># 다음 위치도 현재 섬인 경우
</span>              <span class="k">if</span> <span class="n">island_copy</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">==</span> <span class="n">island_copy</span><span class="p">[</span><span class="n">a</span><span class="p">][</span><span class="n">b</span><span class="p">]:</span>
                  <span class="c1"># 섬에서 방문하지 않은 부분인 경우
</span>                  <span class="k">if</span> <span class="n">visited_island</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                      <span class="n">visited_island</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
                      <span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">))</span>
                  <span class="k">continue</span>
              <span class="c1"># 다음 위치가 바다인 경우
</span>              <span class="k">if</span> <span class="n">island_copy</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                  <span class="c1"># 현재 위치가 섬이라면 음수이므로 거리는 1로 초기화
</span>                  <span class="k">if</span> <span class="n">island_copy</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                      <span class="n">island_copy</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
                  <span class="k">elif</span> <span class="n">island_copy</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                      <span class="n">island_copy</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="n">island_copy</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
                  <span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">))</span>
              <span class="c1"># 다른 섬을 만난 경우
</span>              <span class="k">if</span> <span class="n">island_copy</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                  <span class="n">temp</span> <span class="o">=</span> <span class="n">island_copy</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span>
                  <span class="c1"># 작은 값으로 교체
</span>                  <span class="n">answer</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">answer</span><span class="p">,</span> <span class="n">temp</span><span class="p">)</span>
                  <span class="k">return</span>


  <span class="c1"># 섬 초기화
</span>  <span class="n">N</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
  <span class="n">island</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">)]</span>
  <span class="n">visited</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">N</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">)]</span>

  <span class="c1"># 방향벡터 R, D, L, U
</span>  <span class="n">dx</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
  <span class="n">dy</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>

  <span class="c1"># 각 섬을 bfs하기 위한 queue
</span>  <span class="n">island_info</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span>
  <span class="n">island_number</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="c1"># 섬이 대각선으로 있는 경우의 최대 값
</span>  <span class="n">answer</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">3</span>

  <span class="c1"># dfs를 통해 섬 넘버링
</span>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
      <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
          <span class="c1"># 한 섬을 완료하면 다른 섬에는 다른 번호를 붙여줌
</span>          <span class="k">if</span> <span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
              <span class="n">island_number</span> <span class="o">+=</span> <span class="mi">1</span>

  <span class="c1"># bfs를 통해 최단 거리 찾기
</span>  <span class="k">while</span> <span class="n">island_info</span><span class="p">:</span>
      <span class="n">popped</span> <span class="o">=</span> <span class="n">island_info</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>
      <span class="n">bfs</span><span class="p">(</span><span class="n">popped</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">popped</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

  <span class="k">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>

</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>
:ET