I"~N<ul>
  <li>11주차 과제 - 최소 개수 구하기(다익스트라 알고리즘)</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/34560965/119124743-fa632280-ba6b-11eb-9405-714166191912.png" alt="image" />
<img src="https://user-images.githubusercontent.com/34560965/119124752-fc2ce600-ba6b-11eb-9caf-c8254da77fd6.png" alt="image" />
<img src="https://user-images.githubusercontent.com/34560965/119124759-fdf6a980-ba6b-11eb-97eb-edd6667a775c.png" alt="image" /></p>

<ul>
  <li>
    <p>사용 언어 : python</p>
  </li>
  <li>
    <p>해결 날짜 : 2021-05-20</p>
  </li>
  <li>
    <p>느낀점 및 해결 과정 :</p>

    <ul>
      <li>0,0에서 M-1,N-1 까지의 최소 비용을 찾는 것이므로 distance 변수의 초기 값을 무한대로 설정한 다음 이중 포문으로 R, L, U, D인 곳의 비용은 0으로, 나머지는 1로 초기화 하였다. 이 때 끝에서 R, L, U ,D를 만나 갈 수 없을 경우는 넣지 않는다.</li>
      <li>그래프의 각 상하좌우의 값을 설정한 다음, 다익스트라 알고리즘을 통해 시작 노드(0번 노드)에서 마지막 노드(M*N-1번 노드)까지의 최소 비용을 계산한다.</li>
      <li>
        <p>모든 최소 비용을 계산하면 distance 배열의 마지막 인덱스가 0,0에서 M-1,N-1 까지의 최소 비용이므로 출력한다.</p>
      </li>
      <li>
        <p>시간 복잡도 :</p>

        <ul>
          <li>이중 포문 : O(MN) = O(V) (M=세로, N=가로, V=정점의 수)</li>
          <li>다익스트라 : O(ELogV) (E=간선의 수, V=정점의 수)</li>
          <li>따라서 O(V+ELogV) = O(ELogV) 의 시간 복잡도를 갖는다.</li>
        </ul>
      </li>
      <li>코드</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
</pre></td> --><td class="rouge-code"><pre>  <span class="kn">import</span> <span class="nn">heapq</span>

  <span class="c1"># 무한대 값 표시
</span>  <span class="n">INF</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mf">1e9</span><span class="p">)</span>

  <span class="c1"># 물건의 개수 M, N
</span>  <span class="n">M</span><span class="p">,</span> <span class="n">N</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
  <span class="c1"># 격자무늬에 R,L,D,U 입력
</span>  <span class="n">plaid</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">M</span><span class="p">)]</span>
  <span class="n">vertex</span> <span class="o">=</span> <span class="n">M</span> <span class="o">*</span> <span class="n">N</span>  <span class="c1"># 정점의 개수
</span>  <span class="n">graph</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">vertex</span><span class="p">)]</span>  <span class="c1"># 그래프 초기화
</span>  <span class="n">distance</span> <span class="o">=</span> <span class="p">[</span><span class="n">INF</span><span class="p">]</span> <span class="o">*</span> <span class="n">vertex</span>  <span class="c1"># 최단 거리의 초기값은 전부 무한대
</span>
  <span class="c1"># 이중 포문을 돌며 R, L, U, D인 곳의 비용은 0, 그 외는 1로 초기화
</span>  <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">M</span><span class="p">):</span>
      <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
          <span class="n">direction</span> <span class="o">=</span> <span class="n">plaid</span><span class="p">[</span><span class="n">a</span><span class="p">][</span><span class="n">b</span><span class="p">]</span>
          <span class="k">if</span> <span class="n">direction</span> <span class="o">==</span> <span class="s">'R'</span><span class="p">:</span>
              <span class="k">if</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">!=</span> <span class="n">N</span><span class="p">:</span>
                  <span class="n">graph</span><span class="p">[</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
              <span class="k">if</span> <span class="n">b</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                  <span class="n">graph</span><span class="p">[</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
              <span class="k">if</span> <span class="n">a</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                  <span class="n">graph</span><span class="p">[</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">([(</span><span class="n">a</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
              <span class="k">if</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">!=</span> <span class="n">M</span><span class="p">:</span>
                  <span class="n">graph</span><span class="p">[</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">([(</span><span class="n">a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
          <span class="k">elif</span> <span class="n">direction</span> <span class="o">==</span> <span class="s">'L'</span><span class="p">:</span>
              <span class="k">if</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">!=</span> <span class="n">N</span><span class="p">:</span>
                  <span class="n">graph</span><span class="p">[</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
              <span class="k">if</span> <span class="n">b</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                  <span class="n">graph</span><span class="p">[</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
              <span class="k">if</span> <span class="n">a</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                  <span class="n">graph</span><span class="p">[</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">([(</span><span class="n">a</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
              <span class="k">if</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">!=</span> <span class="n">M</span><span class="p">:</span>
                  <span class="n">graph</span><span class="p">[</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">([(</span><span class="n">a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
          <span class="k">elif</span> <span class="n">direction</span> <span class="o">==</span> <span class="s">'U'</span><span class="p">:</span>
              <span class="k">if</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">!=</span> <span class="n">N</span><span class="p">:</span>
                  <span class="n">graph</span><span class="p">[</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
              <span class="k">if</span> <span class="n">b</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                  <span class="n">graph</span><span class="p">[</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
              <span class="k">if</span> <span class="n">a</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                  <span class="n">graph</span><span class="p">[</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">([(</span><span class="n">a</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
              <span class="k">if</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">!=</span> <span class="n">M</span><span class="p">:</span>
                  <span class="n">graph</span><span class="p">[</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">([(</span><span class="n">a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
          <span class="k">elif</span> <span class="n">direction</span> <span class="o">==</span> <span class="s">'D'</span><span class="p">:</span>
              <span class="k">if</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">!=</span> <span class="n">N</span><span class="p">:</span>
                  <span class="n">graph</span><span class="p">[</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
              <span class="k">if</span> <span class="n">b</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                  <span class="n">graph</span><span class="p">[</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
              <span class="k">if</span> <span class="n">a</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                  <span class="n">graph</span><span class="p">[</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">([(</span><span class="n">a</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
              <span class="k">if</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">!=</span> <span class="n">M</span><span class="p">:</span>
                  <span class="n">graph</span><span class="p">[</span><span class="n">a</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">([(</span><span class="n">a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">b</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>


  <span class="k">def</span> <span class="nf">dijkstra</span><span class="p">():</span>
      <span class="n">q</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="c1"># 시작 노드로 가기 위한 최단 경로는 0으로 설정하여, 큐에 삽입
</span>      <span class="n">heapq</span><span class="p">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
      <span class="n">distance</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="k">while</span> <span class="n">q</span><span class="p">:</span>  <span class="c1"># 큐가 비어있지 않다면
</span>          <span class="c1"># 가장 최단 거리가 짧은 노드에 대한 정보를 꺼내기
</span>          <span class="n">dist</span><span class="p">,</span> <span class="n">now</span> <span class="o">=</span> <span class="n">heapq</span><span class="p">.</span><span class="n">heappop</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
          <span class="k">if</span> <span class="n">distance</span><span class="p">[</span><span class="n">now</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">dist</span><span class="p">:</span>
              <span class="k">continue</span>
          <span class="c1"># 현재 노드와 연결된 다른 인접한 노드들을 확인
</span>          <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">now</span><span class="p">]:</span>
              <span class="n">cost</span> <span class="o">=</span> <span class="n">dist</span> <span class="o">+</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
              <span class="c1"># 현재 노드를 거쳐서, 다른 노드로 이동하는 거리가 더 짧은 경우
</span>              <span class="k">if</span> <span class="n">cost</span> <span class="o">&lt;</span> <span class="n">distance</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]]:</span>
                  <span class="n">distance</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="n">cost</span>
                  <span class="n">heapq</span><span class="p">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="p">(</span><span class="n">cost</span><span class="p">,</span> <span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>


  <span class="n">dijkstra</span><span class="p">()</span>
  <span class="k">print</span><span class="p">(</span><span class="n">distance</span><span class="p">[</span><span class="n">M</span> <span class="o">*</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>
:ET