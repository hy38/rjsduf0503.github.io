I"D<ul>
  <li>해시 알고리즘 문제 : 프로그래머스 LEVEL 2(전화번호 목록)
<img src="https://user-images.githubusercontent.com/34560965/106597022-29c35180-6599-11eb-8984-5137ce08bcdd.png" alt="image" />
    <ul>
      <li>사용 언어 : C++</li>
      <li>해결 날짜 : 2021-02-02</li>
    </ul>

    <p><strong>- 해결 방법</strong> :</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td> --><td class="rouge-code"><pre> 처음에는 효율성을 생각하지 않고 이중 for문으로 문제를 해결했는데,
 test case가 증가하면 효율성 통과에 실패할 것 같아서 수정했다.

 오름차순으로 먼저 정렬한 다음 정렬된 phone_book vector에서,
 현재 인덱스와 다음 인덱스끼리만 비교하면 되므로 시간 복잡도를 감소시킬 수 있었다.

 현재 인덱스의 값과 다음 인덱스에서 현재 인덱스의 길이만큼 자른 값을 비교하여
 같다면 접두사가 존재하는 것이므로 false를 반환하였다.
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <ul>
      <li>코드</li>
    </ul>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td> --><td class="rouge-code"><pre> #include &lt;string&gt;
 #include &lt;vector&gt;
 #include &lt;algorithm&gt;

 using namespace std;

 bool solution(vector&lt;string&gt; phone_book) {
     bool answer = true;
     sort(phone_book.begin(), phone_book.end());
        
     for(int i = 0; i&lt;phone_book.size()-1; i++){
         if(phone_book[i] == phone_book[i+1].substr(0, phone_book[i].size())){
             answer = false; 
             break;
         }
     }
        
     return answer;
 }
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>
:ET